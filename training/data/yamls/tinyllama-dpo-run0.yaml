run_name: tinyllama-dpo-run0
global_seed: 17
max_seq_len: 1024
sparse_finetuning: false

# Model
model:
  name: hf_dpo
  pretrained_model_name_or_path: robertgshaw2/tinyllama-sft-run0
  pretrained: true
  use_flash_attention_2: false
  use_auth_token: true

ref_model:
  name: hf_dpo
  pretrained_model_name_or_path: robertgshaw2/tinyllama-sft-run0
  pretrained: true
  use_flash_attention_2: false
  use_auth_token: true

# Tokenizer
tokenizer:
  name: robertgshaw2/tinyllama-sft-run0
  kwargs:
    model_max_length: ${max_seq_len}

# Dataloaders
train_loader:
  name: dpo
  dataset:
    hf_name: HuggingFaceH4/ultrafeedback_binarized
    split: train_prefs
    max_seq_len: ${max_seq_len}
    num_samples: all
    shuffle: true
    max_prompt_length: 512
  drop_last: true
  num_workers: 8
  pin_memory: true
  prefetch_factor: 2
  persistent_workers: true
  timeout: 0

# Optimization
scheduler:
  name: linear_decay_with_warmup
  t_warmup: 1ba

# Note: You may want to change learning rate, betas, weight decay
optimizer:
  name: decoupled_adamw
  lr: 5.0e-7
  betas:
  - 0.9
  - 0.95
  weight_decay: 0.0

# we can't use gradient clipping for sparse training runs because we don't have a way to mask gradients of pruned weights, and thus the global gradient norm incorrect
algorithms:
  gradient_clipping:
    clipping_type: norm
    clipping_threshold: 1.0

max_duration: 1ep
eval_interval: 1
eval_first: False
global_train_batch_size: 32

# System
seed: ${global_seed}
device_eval_batch_size: 32
device_train_batch_size: 32
device_train_microbatch_size: 2
precision: amp_bf16

# FSDP
fsdp_config:
  sharding_strategy: FULL_SHARD
  mixed_precision:
    reduce_dtype: bf16
    buffer_dtype: bf16
  activation_checkpointing: true
  activation_checkpointing_reentrant: false
  activation_cpu_offload: false
  limit_all_gathers: true
  verbose: false

# Logging
progress_bar: true
# log_to_console: true
# console_log_interval: 1ba

callbacks:
  speed_monitor:
    window_size: 10
  lr_monitor: {}
  memory_monitor: {}
  runtime_estimator: {}

loggers:
  wandb: {
    "project": "zephyr-training",
    "entity": "rshaw"
  }

profiler:
  schedule:
    skip_first: 1
    wait: 1
    warmup: 1
    active: 4
    repeat: 1
  json_trace_handler:
    folder: /data/runs/{run_name}/traces

save_interval: 100ba
save_num_checkpoints_to_keep: 1  # Important, this cleans up checkpoints saved to DISK
save_folder: data/runs/{run_name}/checkpoints
